---
browserify: true
---

import jquery from 'jquery';

/**
 * -----------------------
 * | APLICATION SETTINGS |
 * -----------------------
 */

/**
 * Application settings
 *
 * @const
 * @type {Object}
 * @name config
 */
const appConfig = {
  menu: {
    itemsSelector: '.nav-link[href^="#"]',
    documentSelector: 'html, body',
    animationSpeed: 400,
  },
  bkg: {
    itemSelector: '[data-bridge-tower]',
    animationDelay: 10000,
    colors: ['yellow', 'orange', 'blue', 'pink', 'green'],
  },
};

/**
 * ---------
 * | UTILS |
 * ---------
 */

 /**
  * Get a random integer between `min` and `max`.
  *
  * @const
  * @type {Function}
  * @name getRandomIntAction
  * @param {number} min - min number
  * @param {number} max - max number
  * @return {int} a random integer
  */
 const getRandomIntAction = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);

/**
 * -----------------
 * | MAIN FUNCTION |
 * -----------------
 */

/**
 * @const
 * @type {Function}
 * @name app
 * @description Execute application
 * @param {Object} props Object containing all the desired properties
 * @default {}
 * @param {Function} callback This function defines how actions must be executed. Receives the props object as parameter
 * @default empty Function
 * @return {Function} When executed, this function will trigger the defined callback
 */
const app = (props = {}, callback = () => {}) => callback(props);

/**
 * --------------------------
 * | APPLICATION PROPERTIES |
 * --------------------------
 */

/**
 * @const
 * @type {Object}
 * @name properties
 * @description All aplication properties. If a property isn't defined here it shouldn't be used
 */
const properties = {
  w: window,
  $: jquery,
  config: appConfig,
  getRandomInt: getRandomIntAction,
};

/**
 * -----------------
 * | APP EXECUTION |
 * -----------------
 */

app(properties, ({ w, $, config, getRandomInt }) => {
  const { menu, bkg } = config;

  // ------------------
  // SET MENU ANIMATION
  // ------------------
  $(menu.itemsSelector).on('click.animateScroll', (event) => {
    event.preventDefault();

    const href = $(event.target).attr('href');
    const offSetTop = $(href).offset().top;
    const $document = $(menu.documentSelector);

    $document.finish().animate(
      { scrollTop: offSetTop },
      menu.animationSpeed,
      () => w.location.hash = href
    );
  });

  // ------------------------
  // SET BACKGROUND ANIMATION
  // ------------------------
  const $tower = $(bkg.itemSelector);
  const getColor = () => {
    const current = $tower.attr('data-tower-color');
    let color = bkg.colors[getRandomInt(0, bkg.colors.length - 1)];
    if (current !== color) {
      return color;
    }
    return getColor();
  }

  $tower.attr('data-tower-color', getColor());
  w.setInterval(() => $tower.attr('data-tower-color', getColor()), bkg.animationDelay);
});